killed_df$date, "was the date that the shooting occurred.", "<br>")
)
shootings_plot
shootings_plot <- leaflet(data = killed_df) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lat = 47, lng = -110, zoom = 3) %>%
addCircles(
lat = ~lat,
lng = ~long,
stroke = FALSE,
radius = ~num_killed * 10500,
popup = paste(
killed_df$num_killed, "people were killed in this shooting.", "<br>",
killed_df$city, "is the city where this shooting occurred.", "<br>",
killed_df$date, "was the date that the shooting occurred.", "<br>")
)
shootings_plot
shootings_plot <- leaflet(data = killed_df) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lat = 47, lng = -110, zoom = 4) %>%
addCircles(
lat = ~lat,
lng = ~long,
stroke = FALSE,
radius = ~num_killed * 10500,
popup = paste(
killed_df$num_killed, "people were killed in this shooting.", "<br>",
killed_df$city, "is the city where this shooting occurred.", "<br>",
killed_df$date, "was the date that the shooting occurred.", "<br>")
)
shootings_plot
shootings_plot <- leaflet(data = killed_df) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lat = 47, lng = -100, zoom = 4) %>%
addCircles(
lat = ~lat,
lng = ~long,
stroke = FALSE,
radius = ~num_killed * 10500,
popup = paste(
killed_df$num_killed, "people were killed in this shooting.", "<br>",
killed_df$city, "is the city where this shooting occurred.", "<br>",
killed_df$date, "was the date that the shooting occurred.", "<br>")
)
shootings_plot
shootings_plot <- leaflet(data = killed_df) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lat = 40, lng = -100, zoom = 4) %>%
addCircles(
lat = ~lat,
lng = ~long,
stroke = FALSE,
radius = ~num_killed * 10500,
popup = paste(
killed_df$num_killed, "people were killed in this shooting.", "<br>",
killed_df$city, "is the city where this shooting occurred.", "<br>",
killed_df$date, "was the date that the shooting occurred.", "<br>")
)
shootings_plot
shootings_plot <- leaflet(data = killed_df) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lat = 40, lng = -100, zoom = 3.5) %>%
addCircles(
lat = ~lat,
lng = ~long,
stroke = FALSE,
radius = ~num_killed * 10500,
popup = paste(
killed_df$num_killed, "people were killed in this shooting.", "<br>",
killed_df$city, "is the city where this shooting occurred.", "<br>",
killed_df$date, "was the date that the shooting occurred.", "<br>")
)
shootings_plot
shootings_plot <- leaflet(data = killed_df) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lat = 40, lng = -100, zoom = 3) %>%
addCircles(
lat = ~lat,
lng = ~long,
stroke = FALSE,
radius = ~num_killed * 10500,
popup = paste(
killed_df$num_killed, "people were killed in this shooting.", "<br>",
killed_df$city, "is the city where this shooting occurred.", "<br>",
killed_df$date, "was the date that the shooting occurred.", "<br>")
)
shootings_plot
shootings_plot <- leaflet(data = killed_df) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lat = 40, lng = -100, zoom = 3.2) %>%
addCircles(
lat = ~lat,
lng = ~long,
stroke = FALSE,
radius = ~num_killed * 10500,
popup = paste(
killed_df$num_killed, "people were killed in this shooting.", "<br>",
killed_df$city, "is the city where this shooting occurred.", "<br>",
killed_df$date, "was the date that the shooting occurred.", "<br>")
)
shootings_plot
shootings_plot <- leaflet(data = killed_df) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lat = 40, lng = -100, zoom = 3.3) %>%
addCircles(
lat = ~lat,
lng = ~long,
stroke = FALSE,
radius = ~num_killed * 10500,
popup = paste(
killed_df$num_killed, "people were killed in this shooting.", "<br>",
killed_df$city, "is the city where this shooting occurred.", "<br>",
killed_df$date, "was the date that the shooting occurred.", "<br>")
)
shootings_plot
shootings_plot <- leaflet(data = killed_df) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lat = 40, lng = -100, zoom = 3.5) %>%
addCircles(
lat = ~lat,
lng = ~long,
stroke = FALSE,
radius = ~num_killed * 10500,
popup = paste(
killed_df$num_killed, "people were killed in this shooting.", "<br>",
killed_df$city, "is the city where this shooting occurred.", "<br>",
killed_df$date, "was the date that the shooting occurred.", "<br>")
)
shootings_plot
question_plot <- ggplot(shootings_df, aes(as.Date(date)))
question_plot + geom_bar(aes(fill=num_killed), width = 0.5) +
theme(axis.text.x = element_text(angle=65, vjust=0.6)) +
labs(title="Categorywise Bar Chart",
subtitle="Manufacturer of vehicles",
caption="Source: Manufacturers from 'mpg' dataset")
question_plot <- ggplot(shootings_df, aes(months(date), num_killed))
question_plot + geom_bar(stat="identity", width = 0.5, fill="tomato2") +
labs(title="Bar Chart",
subtitle="Manufacturer of vehicles",
caption="Source: Frequency of Manufacturers from 'mpg' dataset") +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
## plot
month <- format(date, "%m")
question_plot <- ggplot(shootings_df, aes(month, num_killed))
question_plot + geom_bar(stat="identity", width = 0.5, fill="tomato2") +
labs(title="Bar Chart",
subtitle="Manufacturer of vehicles",
caption="Source: Frequency of Manufacturers from 'mpg' dataset") +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
month_df$month <- factor(month_df$month, levels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"))
month_df <- shootings_df %>%
mutate(month = format(substr(date, 1, 3)))
month_df$month <- factor(month_df$month, levels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"))
choice_plot <- plot_ly(
data = month_df,
x = ~month,
y = ~num_killed,
type = "bar",
mode = "markers"
) %>%
layout(
title = "Deadliest Month in 2018",
xaxis = list(title = "month"),
yaxis = list(title = "deaths")
)
choice_plot
choice_plot <- plot_ly(
data = month_df,
x = ~month,
y = ~num_killed,
type = "bar",
) %>%
layout(
title = "Deadliest Month in 2018",
xaxis = list(title = "month"),
yaxis = list(title = "deaths")
)
choice_plot
plot_ly(choice_plot)
plot_ly(choice_plot)
choice_plot <- plot_ly(
data = month_df,
x = ~month,
y = ~num_killed,
type = "bar",
) %>%
layout(
title = "Deadliest Month in 2018",
xaxis = list(title = "month"),
yaxis = list(title = "deaths")
)
choice_plot
choice_plot <- plot_ly(
data = month_df,
x = ~month,
y = ~num_killed,
type = "bar",
) %>%
layout(
title = "Deadliest Month in 2018",
xaxis = list(title = "month"),
yaxis = list(title = "deaths")
)
choice_plot
choice_plote <- plot_ly(
data = month_df,
x = ~month,
y = ~num_killed,
type = "bar",
) %>%
layout(
title = "Deadliest Month in 2018",
xaxis = list(title = "month"),
yaxis = list(title = "deaths")
)
choice_plote
choice_plote <- plot_ly(
data = month_df,
x = ~month,
y = ~num_killed,
type = "bar",
mode = "markers"
) %>%
layout(
title = "Deadliest Month in 2018",
xaxis = list(title = "month"),
yaxis = list(title = "deaths")
)
choice_plote
choice_plot_1 <- plot_ly(
data = month_df,
x = ~month,
y = ~num_killed,
type = "bar",
mode = "markers"
) %>%
layout(
title = "Deadliest Month in 2018",
xaxis = list(title = "month"),
yaxis = list(title = "deaths")
)
choice_plot_1
plot_ly(choice_plot_1)
choice_plot_1 <- plot_ly(
data = month_df,
x = ~month,
y = ~num_killed,
type = "bar",
mode = "markers"
) %>%
layout(
title = "Deadliest Month in 2018",
xaxis = list(title = "month"),
yaxis = list(title = "deaths")
)
choice_plot_1
choice_plot_1 <- plot_ly(
data = month_df,
x = ~month,
y = ~num_killed,
type = "bar",
mode = "markers"
) %>%
layout(
title = "Deadliest Month in 2018",
xaxis = list(title = "month"),
yaxis = list(title = "deaths")
)
choice_plot_1
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
source("analysis.R")
flextable(agg_sum)
shootings_plot
choice_plot_1
agg_sum = aggregate.data.frame(shootings_df[,5:6],by=list(shootings_df$state), FUN = sum, na.rm = TRUE)
agg_sum
agg_sum_df <- flextable(head(agg_sum))
agg_sum_df <- set_header_labels(agg_sum_df,
values = list(Group.1 = "State",
num_killed = "Number Killed",
num_injured = "Number Injured")
)
agg_sum_df <- set_header_labels(agg_sum_df,
values = list(Group.1 = "State",
num_killed = "Number Killed",
num_injured = "Number Injured")
)
agg_sum_df_labels <- set_header_labels(agg_sum_df,
values = list(Group.1 = "State",
num_killed = "Number Killed",
num_injured = "Number Injured")
)
agg_sum_df_labels
flextable(agg_sum_df_labels)
flextable(agg_sum_df_labels)
flextable(agg_sum_df_labels)
flextable(agg_sum_df)
flextable(agg_sum_df)
flextable(agg_sum)
agg_sum_df_labels <- set_header_labels(agg_sum_df,
values = list(Group.1 = "State",
num_killed = "Number Killed",
num_injured = "Number Injured")
)
agg_sum = aggregate.data.frame(shootings_df[,5:6],by=list(shootings_df$state), FUN = sum, na.rm = TRUE)
agg_sum
agg_sum = aggregate.data.frame(agg_sum_df_labels[,5:6],by=list(shootings_df$state), FUN = sum, na.rm = TRUE)
agg_sum
agg_sum = aggregate.data.frame(agg_sum_df_labels[,5:6],by=list(shootings_df$state), FUN = sum, na.rm = TRUE)
agg_sum
agg_sum_df <- flextable(head(agg_sum))
agg_sum_df_labels <- set_header_labels(agg_sum_df,
values = list(Group.1 = "State",
num_killed = "Number Killed",
num_injured = "Number Injured")
)
agg_sum_df_labels
agg_sum_df_labels
agg_sum_df_labels
agg_sum = aggregate.data.frame(shootings_df[,5:6],by=list(shootings_df$state), FUN = sum, na.rm = TRUE)
agg_sum
agg_sum
agg_sum_df_labels
flextable(agg_sum_df_labels)
flextable(agg_sum)
library(lintr)
lintr(analysis.R)
incident <- shootings_df %>%
filter(num_killed == max(num_killed))
library(lintr)
lint("analysis.R")
install.packages("shiny")
library(shiny)
runApp('Desktop/INFO201/exercises-gracemcguire/chapter-19-exercises/exercise-1')
runApp('Desktop/INFO201/exercises-gracemcguire/chapter-19-exercises/exercise-1')
library(shiny)
runApp('Desktop/INFO201/exercises-gracemcguire/chapter-19-exercises/exercise-2')
library(rsconnect)
install.packages("rsconnect")
library(rsconnect)
shiny::runApp('Desktop/INFO201/INFO-201-Group-2/INFO-201-Group-2/New INFO-201-Group-2/INFO-201-Group-2')
runApp('Desktop/INFO201/INFO-201-Group-2')
vaers <- read.csv("data/2021VAERSDATA.csv")
setwd("~/Desktop/INFO201/INFO-201-Group-2/data")
vaers <- read.csv("data/2021VAERSDATA.csv")
setwd("~/Desktop/INFO201/INFO-201-Group-2")
vaers <- read.csv("data/2021VAERSDATA.csv")
filter_blank_data <- vaers %>%
filter(!STATE %in% c("XB", ""))
state_unique <- unique(a$STATE)
library("shiny")
library("plotly")
library("leaflet")
library("magick")
filter_blank_data <- vaers %>%
filter(!STATE %in% c("XB", ""))
state_unique <- unique(a$STATE)
library("shiny")
library("plotly")
library("leaflet")
library("magick")
filter_blank_data <- vaers %>%
filter(!STATE %in% c("XB", ""))
state_unique <- unique(a$STATE)
state_check <- checkboxGroupInput(inputId = "States",
label = "Location by State",
choices = state_unique,
selected = state_unique)
grouped_data <- vaers %>%
group_by(STATE) %>%
dplyr::summarize(count = n())
count_range <- range(grouped_data$count)
# app_server.R
server <- function(input, output) {
# first plot
output$bar_chart <- renderPlot({
# manipulate data
plot_data <- vaers %>%
group_by(STATE) %>%
dplyr::summarize(count = n()) %>%
filter(STATE %in% input$States) %>%
filter(count <= input$State_count[2],
count >= input$State_count[1])
# bar chart
plot1 <- ggplot(plot_data) +
geom_col(mapping = aes(x = count,
y = STATE,
fill = STATE))
labs(title = "Number of Deaths in each State",
xlab = "State",
ylab = "Deaths") +
theme(title = element_text(size = 16)) +
scale_fill_brewer("State", palette = "Set3")
return(plot1)
})
output$scatter_plot <- renderPlotly({
# manipulate data
plot_data <- vaers %>%
filter(STATE %in% input$Age,
AGE_YRS <= input$age_affected)
# Use plotly to plot scatter plot
plot2 <- plot_ly(plot_data,
x = ~AGE_YRS,
y = ~STATE,
type = "scatter",
mode = "markers",
color = ~SEX,
marker = list(size = 3),
text = ~paste("<b>Age:</b>",
plot_data$AGE_YRS,
"<br>",
"<b>State:</b>",
plot_data$STATE),
hoverinfo = "text") %>%
# title and axes label
layout(title = "Ages Affected in each State Due to COVID",
xaxis = list(title = "Ages of those Affected by COVID:"),
yaxis = list(title = "Location of Ages Affected:"))
return(plot2)
})
}
count_slider <- sliderInput(inputId = "State_count",
label = "Location by State Value Range",
min = count_range[1],
max = count_range[2],
value = count_range,
step = 1)
grouped_data <- vaers %>%
group_by(STATE) %>%
dplyr::summarize(count = n())
count_range <- range(grouped_data$count)
runApp()
vaers <- read.csv("data/2021VAERSDATA.csv")
filter_blank_data <- vaers %>%
filter(!STATE %in% c("XB", ""))
state_unique <- unique(a$STATE)
state_check <- checkboxGroupInput(inputId = "States",
label = "Location by State",
choices = state_unique,
selected = state_unique)
grouped_data <- vaers %>%
group_by(STATE)
grouped_data <- vaers %>%
group_by(STATE) %>%
dplyr::summarize(count = n())
count_slider <- sliderInput(inputId = "State_count",
label = "Location by State Value Range",
min = count_range[1],
max = count_range[2],
value = count_range,
step = 1)
state_age <- checkboxGroupInput(inputId = "Age",
label = "Location by State",
choices = state_unique,
selected = state_unique)
server <- function(input, output) {
# first plot
output$bar_chart <- renderPlot({
# manipulate data
plot_data <- vaers %>%
group_by(STATE) %>%
dplyr::summarize(count = n()) %>%
filter(STATE %in% input$States) %>%
filter(count <= input$State_count[2],
count >= input$State_count[1])
# bar chart
plot1 <- ggplot(plot_data) +
geom_col(mapping = aes(x = count,
y = STATE,
fill = STATE))
labs(title = "Number of Deaths in each State",
xlab = "State",
ylab = "Deaths") +
theme(title = element_text(size = 16)) +
scale_fill_brewer("State", palette = "Set3")
return(plot1)
})
output$scatter_plot <- renderPlotly({
plot_data <- vaers %>%
filter(STATE %in% input$Age,
AGE_YRS <= input$age_affected)
# Use plotly to plot scatter plot
plot2 <- plot_ly(plot_data,
x = ~AGE_YRS,
y = ~STATE,
type = "scatter",
mode = "markers",
color = ~SEX,
marker = list(size = 3),
text = ~paste("<b>Age:</b>",
plot_data$AGE_YRS,
"<br>",
"<b>State:</b>",
plot_data$STATE),
hoverinfo = "text") %>%
# title and axes label
layout(title = "Ages Affected in each State Due to COVID",
xaxis = list(title = "Ages of those Affected by COVID:"),
yaxis = list(title = "Location of Ages Affected:"))
return(plot2)
})
}
filter_blank_data <- vaers %>%
filter(!STATE %in% c("XB", ""))
state_unique <- unique(a$STATE)
filter_blank_data <- vaers %>%
filter(!STATE %in% c("XB", ""))
state_unique <- unique(a$STATE)
shiny::runApp()
runApp()
runApp()
runApp()
